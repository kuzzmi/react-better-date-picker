{"version":3,"file":"index.js","sources":["webpack:///webpack/bootstrap d67a861362abe4022f5d","webpack:///src/react-better-date-picker.js","webpack:///external \"react\"","webpack:///./~/react-moment-proptypes/src/index.js","webpack:///external \"moment\"","webpack:///./~/react-moment-proptypes/src/moment-validation-wrapper.js","webpack:///src/views.js","webpack:///src/config.js","webpack:///src/utils.js","webpack:///src/defaults.js","webpack:///src/classes.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d67a861362abe4022f5d\n **/","import React, { Component, PropTypes } from 'react';\r\nimport MomentPropTypes from 'react-moment-proptypes';\r\nimport moment from 'moment';\r\n// import onClickOutside from 'react-onclickoutside';\r\n\r\nimport { WeeksView, MonthsView, YearsView } from './views.js';\r\nimport { getMomentOrNull, getYearsInterval } from './utils.js';\r\n\r\nimport config from './config.js';\r\nimport defaultClasses from './classes.js';\r\nimport defaults from './defaults.js';\r\n\r\nclass BetterDatePicker extends Component {\r\n\r\n    static propTypes = {\r\n        date: PropTypes.oneOfType([\r\n            MomentPropTypes.momentObj,\r\n            MomentPropTypes.momentString,\r\n            PropTypes.instanceOf(Date)\r\n        ]),\r\n        onChange: PropTypes.func.isRequired,\r\n        placeholder: PropTypes.string,\r\n        classes: PropTypes.object,\r\n        view: PropTypes.oneOf(['weeks', 'months', 'years']),\r\n        views: PropTypes.arrayOf(PropTypes.oneOf(['weeks', 'months', 'years'])),\r\n        firstDayOfWeek: PropTypes.number,\r\n        theme: PropTypes.object\r\n    };\r\n\r\n    static defaultProps = {\r\n        classes: defaultClasses,\r\n        format: defaults.format,\r\n        views: ['weeks', 'months', 'years'],\r\n        firstDayOfWeek: 0,\r\n\r\n        hideToolbox: false,\r\n        hideInput: false\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const date = getMomentOrNull(props.date, props.format);\r\n\r\n        this.state = {\r\n            date:     props.date || moment(),\r\n            input:    date ? date.format(props.format) : '',\r\n            expanded: props.expanded || false,\r\n            view:     props.view || defaults.view,\r\n            toolboxOnTheBottom: false\r\n        };\r\n\r\n        this.onInputChange         = this.onInputChange.bind(this);\r\n        this.handleOnInputClick    = this.handleOnInputClick.bind(this);\r\n\r\n        // Open/close\r\n        this.collapse              = this.collapse.bind(this);\r\n        this.expand                = this.expand.bind(this);\r\n\r\n        // Rendering parts\r\n        this.renderViewTitle       = this.renderViewTitle.bind(this);\r\n        this.renderCalendarView    = this.renderCalendarView.bind(this);\r\n\r\n        // Clicks inside of calendar\r\n        this.handleOnDayClick      = this.handleOnDayClick.bind(this);\r\n        this.handleOnYearClick     = this.handleOnYearClick.bind(this);\r\n        this.handleOnMonthClick    = this.handleOnMonthClick.bind(this);\r\n        this.handleOnDateClick     = this.handleOnDateClick.bind(this);\r\n        this.handleOnTitleClick    = this.handleOnTitleClick.bind(this);\r\n\r\n        // Left/Right arrows\r\n        this.handleOnMoveClick     = this.handleOnMoveClick.bind(this);\r\n        this.handleOnNextClick     = this.handleOnNextClick.bind(this);\r\n        this.handleOnPrevClick     = this.handleOnPrevClick.bind(this);\r\n\r\n        // Bottom buttons\r\n        this.handleOnTodayClick    = this.handleOnTodayClick.bind(this);\r\n        this.handleOnTomorrowClick = this.handleOnTomorrowClick.bind(this);\r\n        this.handleOnNextWeekClick = this.handleOnNextWeekClick.bind(this);\r\n\r\n        // Reposition calendar respecting the screen sizes\r\n        this.setupCalendarPosition = this.setupCalendarPosition.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        let input = getMomentOrNull(nextProps.date, nextProps.format);\r\n\r\n        input = input ? input.format(nextProps.format) : '';\r\n\r\n        if (nextProps.expanded === false &&\r\n            this.state.expanded === true) {\r\n            this.collapse();\r\n        } else {\r\n            this.setState({\r\n                date: nextProps.date || new Date(),\r\n                expanded: nextProps.expanded,\r\n                input\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(nextProps, nextState) {\r\n        if (nextState.expanded === false &&\r\n            this.state.expanded === true &&\r\n            this.props.staticCalendar !== true) {\r\n            this.setupCalendarPosition();\r\n        }\r\n    }\r\n\r\n    setupCalendarPosition() {\r\n        const body     = document.getElementsByTagName('body')[0];\r\n        const calendar = this.calendarElement;\r\n        const input    = this.inputElement || this.container;\r\n\r\n        if (!input) {\r\n            return;\r\n        }\r\n\r\n        // Maximum visible sizes of the body\r\n        const maxVisibleHeight = body.clientHeight;\r\n        const maxVisibleWidth  = body.clientWidth;\r\n\r\n        // Get Input field\r\n        const inputRect = input.getBoundingClientRect();\r\n\r\n        // Clone hidden calendar to detect size before animation\r\n        // of the original one has to happen\r\n        const clonedCalendar = calendar.cloneNode(true);\r\n        clonedCalendar.style.animation  = 'none';\r\n        clonedCalendar.style.visibility = 'collapse';\r\n\r\n        // Setup a cloned version of a calendar\r\n        clonedCalendar.style.position = 'fixed';\r\n        clonedCalendar.style.top  = ( inputRect.top + inputRect.height ) + 'px';\r\n        clonedCalendar.style.left = inputRect.left + 'px';\r\n\r\n        // Finally append clonedCalendar to the body, so\r\n        // we can get its sizes\r\n        body.appendChild(clonedCalendar);\r\n\r\n        const calendarRect = clonedCalendar.getBoundingClientRect();\r\n\r\n        // Calendar will be of a fixed size\r\n        calendar.style.position = 'fixed';\r\n\r\n        if (calendarRect.bottom > maxVisibleHeight) {\r\n            let top = inputRect.top - calendarRect.height - 10;\r\n            if (!this.state.toolboxOnTheBottom) {\r\n                top += 30;\r\n            }\r\n            calendar.style.top = `${top}px`;\r\n            calendar.style.transformOrigin = 'bottom';\r\n            this.setState({ toolboxOnTheBottom: true });\r\n        } else {\r\n            calendar.style.top = inputRect.top + inputRect.height + 'px';\r\n            this.setState({ toolboxOnTheBottom: false });\r\n        }\r\n\r\n        if (calendarRect.right > maxVisibleWidth) {\r\n            calendar.style.left = ( inputRect.right - calendarRect.width - 10 ) + 'px';\r\n        }\r\n\r\n        clonedCalendar.remove();\r\n    }\r\n\r\n    expand() {\r\n        this.setState({\r\n            closing: false,\r\n            expanded: true\r\n        });\r\n    }\r\n\r\n    collapse() {\r\n        this.setState({\r\n            closing: true,\r\n            expanded: false\r\n        });\r\n    }\r\n\r\n    onInputChange(e) {\r\n        const input = e.target.value;\r\n        const momentOrNull = getMomentOrNull(input, this.props.format);\r\n        if (momentOrNull) {\r\n            this.props.onChange(momentOrNull.toDate());\r\n        } else {\r\n            this.props.onChange();\r\n        }\r\n        this.setState({ input });\r\n    }\r\n\r\n    handleOnInputClick() {\r\n        this.expand();\r\n        this.props.onClick && this.props.onClick();\r\n    }\r\n\r\n    handleClickOutside() {\r\n        this.collapse();\r\n    }\r\n\r\n    renderCalendarView() {\r\n        const { date = new Date(), view } = this.state;\r\n        const { classes, firstDayOfWeek } = this.props;\r\n\r\n        switch(view) {\r\n            case 'weeks':\r\n                return <WeeksView date={ date } firstDayOfWeek={ firstDayOfWeek } classes={ classes } onDateClick={ this.handleOnDayClick }/>\r\n            case 'months':\r\n                return <MonthsView date={ date } classes={ classes } onDateClick={ this.handleOnMonthClick }/>\r\n            case 'years':\r\n                return <YearsView date={ date } classes={ classes } onDateClick={ this.handleOnYearClick }/>\r\n            default:\r\n                return <p>Error</p>\r\n        }\r\n    }\r\n\r\n    renderViewTitle() {\r\n        const { date, view } = this.state;\r\n\r\n        switch(view) {\r\n            case 'weeks':\r\n                return moment(date).format('MMMM YYYY')\r\n            case 'months':\r\n                return moment(date).format('YYYY')\r\n            case 'years':\r\n                const { yearsFrom, yearsTo } = getYearsInterval(date, config.yearsInterval);\r\n                const year = 'YYYY';\r\n                return yearsFrom.format(year) + ' — ' + yearsTo.format(year);\r\n            default:\r\n                return <p>Error</p>\r\n        }\r\n    }\r\n\r\n    handleOnTitleClick() {\r\n        const { view } = this.state;\r\n        const { views } = this.props;\r\n\r\n        const current  = views.indexOf(view);\r\n        const nextView = views[current + 1] || views[0];\r\n\r\n        this.setState({ view: nextView });\r\n    }\r\n\r\n    handleOnTodayClick() {\r\n        this.handleOnDayClick(moment());\r\n    }\r\n\r\n    handleOnTomorrowClick() {\r\n        this.handleOnDayClick(moment().add(1, 'day'));\r\n    }\r\n\r\n    handleOnNextWeekClick() {\r\n        this.handleOnDayClick(moment().add(7, 'day').weekday(this.props.firstDayOfWeek));\r\n    }\r\n\r\n    handleOnDayClick(date) {\r\n        this.handleOnDateClick(date);\r\n        this.props.onChange(moment( date ).toDate());\r\n\r\n        if (!this.props.staticCalendar) {\r\n            this.collapse();\r\n        }\r\n    }\r\n\r\n    handleOnMonthClick(date) {\r\n        this.setState({ view: 'weeks' });\r\n        this.handleOnDateClick(date);\r\n    }\r\n\r\n    handleOnYearClick(date) {\r\n        this.setState({ view: 'months' });\r\n        this.handleOnDateClick(date);\r\n    }\r\n\r\n    handleOnDateClick(date) {\r\n        this.setState({ date });\r\n    }\r\n\r\n    handleOnMoveClick(direction = 1) {\r\n        const { date, view } = this.state;\r\n\r\n        switch(view) {\r\n            case 'weeks':\r\n                this.setState({ date: moment(date).add(1 * direction, 'month') });\r\n                break;\r\n            case 'months':\r\n                this.setState({ date: moment(date).add(1 * direction, 'year') });\r\n                break;\r\n            case 'years':\r\n                const years = config.yearsInterval * 2 + 1;\r\n                this.setState({ date: moment(date).add(years * direction, 'year') });\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    handleOnNextClick() {\r\n        this.handleOnMoveClick();\r\n    }\r\n\r\n    handleOnPrevClick() {\r\n        this.handleOnMoveClick(-1);\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            leftArrow = defaults.leftArrow,\r\n            rightArrow = defaults.rightArrow,\r\n            hideInput,\r\n            hideToolbox,\r\n            format,\r\n            placeholder,\r\n            classes\r\n        } = this.props;\r\n\r\n        const containerClasses = classes.container +\r\n             ( this.state.closing ? ` ${classes.containerClosing}` : '' );\r\n\r\n        return (\r\n            <div className={ containerClasses }\r\n                ref={ c => { this.container = c } }>\r\n                {\r\n                    !hideInput &&\r\n                    <input type=\"text\"\r\n                        ref={ c => { this.inputElement = c } }\r\n                        className={ classes.input }\r\n                        value={ this.state.input }\r\n                        onChange={ this.onInputChange }\r\n                        onClick={ this.handleOnInputClick }\r\n                        onFocus={ this.handleOnInputClick }\r\n                        placeholder={ placeholder || format }\r\n                        />\r\n                }\r\n\r\n                {\r\n                    this.state.expanded &&\r\n                    <div className={ classes.calendarContainer }\r\n                        ref={ c => { this.calendarElement = c } }>\r\n\r\n                    { ( !this.state.toolboxOnTheBottom && !hideToolbox ) &&\r\n                        <div className={ classes.toolbox }>\r\n                            <button type=\"button\" onClick={ this.handleOnTodayClick }>\r\n                                Today\r\n                            </button>\r\n                            <button type=\"button\" onClick={ this.handleOnTomorrowClick }>\r\n                                Tomorrow\r\n                            </button>\r\n                            <button type=\"button\" onClick={ this.handleOnNextWeekClick }>\r\n                                Next week\r\n                            </button>\r\n                        </div>\r\n                    }\r\n\r\n                        <div className={ classes.controls }>\r\n                            <div className={ classes.leftArrow }\r\n                                 onClick={ this.handleOnPrevClick }>\r\n                                { leftArrow }\r\n                            </div>\r\n                            <div className={ classes.title }\r\n                                 onClick={ this.handleOnTitleClick }>\r\n                                { this.renderViewTitle() }\r\n                            </div>\r\n                            <div className={ classes.rightArrow }\r\n                                 onClick={ this.handleOnNextClick }>\r\n                                { rightArrow }\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className={ classes.calendar }>\r\n                            { this.renderCalendarView() }\r\n                        </div>\r\n\r\n                    { ( this.state.toolboxOnTheBottom && !hideToolbox ) &&\r\n                        <div className={ classes.toolbox }>\r\n                            <button type=\"button\" onClick={ this.handleOnTodayClick }>\r\n                                Today\r\n                            </button>\r\n                            <button type=\"button\" onClick={ this.handleOnTomorrowClick }>\r\n                                Tomorrow\r\n                            </button>\r\n                            <button type=\"button\" onClick={ this.handleOnNextWeekClick }>\r\n                                Next week\r\n                            </button>\r\n                        </div>\r\n                    }\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n// onClickOutside()\r\nexport default BetterDatePicker;\r\n\n\n\n/** WEBPACK FOOTER **\n ** src/react-better-date-picker.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"react\"\n ** module id = 2\n ** module chunks = 0\n **/","var moment = require('moment');\nvar momentValidationWrapper = require('./moment-validation-wrapper');\n\nmoment.createFromInputFallback = function(config) {\n  config._d = new Date(config._i);\n};\n\nvar ANONYMOUS = '<<anonymous>>';\n\nvar ReactPropTypeLocationNames = {\n  prop : 'prop',\n  context : 'context',\n  childContext : 'child context',\n};\n\nfunction createMomentChecker(type, typeValidator, validator, momentType) {\n\n  function propValidator(isRequired, props, propName, componentName, location, propFullName) {\n\n    if (isRequired) {\n      var locationName = ReactPropTypeLocationNames[ location ];\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n      if (!props.hasOwnProperty(propName)) {\n        return new Error(\n          'Required ' + locationName + ' `' + propFullName +\n          '` was not specified in `' +\n          componentName + '`.'\n        );\n      }\n    }\n\n    var propValue = props[ propName ];\n    var propType = typeof propValue;\n\n    if (typeof propValue === 'undefined' || propValue === null) {\n      return null;\n    }\n\n    if (typeValidator && !typeValidator(propValue)) {\n      return new Error(\n        'Invalid input type: `' + propName + '` of type `' + propType + '` ' +\n        'supplied to `' + componentName + '`, expected `' + type + '`.'\n      );\n    }\n\n    if (! validator(propValue)) {\n      return new Error(\n        'Invalid ' + location + ' `' + propName + '` of type `' + propType + '` ' +\n        'supplied to `' + componentName + '`, expected `' + momentType + '`.'\n      );\n    }\n\n    return null;\n\n  }\n\n  var requiredPropValidator = propValidator.bind(null, false);\n  requiredPropValidator.isRequired = propValidator.bind(null, true);\n\n  return requiredPropValidator;\n\n}\n\nmodule.exports = {\n\n  momentObj : createMomentChecker(\n    'object',\n    function(obj) {\n      return typeof obj === 'object';\n    },\n    function isValid(value) {\n      return momentValidationWrapper.isValidMoment(value);\n    },\n    'Moment'\n  ),\n\n  momentString : createMomentChecker(\n    'string',\n    function(str) {\n      return typeof str === 'string';\n    },\n    function isValid(value) {\n      return momentValidationWrapper.isValidMoment(moment(value));\n    },\n    'Moment'\n  ),\n\n  momentDurationObj : createMomentChecker(\n    'object',\n    function(obj) {\n      return typeof obj === 'object';\n    },\n    function isValid(value) {\n      return moment.isDuration(value);\n    },\n    'Duration'\n  ),\n\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-moment-proptypes/src/index.js\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"moment\"\n ** module id = 4\n ** module chunks = 0\n **/","var moment = require('moment');\n\nfunction isValidMoment(testMoment) {\n  if (typeof testMoment.isValid === 'function') {\n    // moment 1.7.0+\n    return testMoment.isValid();\n  }\n\n  return ! isNaN(testMoment);\n}\n\nmodule.exports = {\n  isValidMoment : isValidMoment,\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/react-moment-proptypes/src/moment-validation-wrapper.js\n ** module id = 5\n ** module chunks = 0\n **/","import React, { Component, PropTypes } from 'react';\r\nimport MomentPropType from 'react-moment-proptypes';\r\nimport moment from 'moment';\r\n\r\nimport config from './config.js';\r\n\r\nimport {\r\n    makeInterval,\r\n    getTotalWeeksInMonth,\r\n    getFirstDayOfFirstWeek\r\n} from './utils.js';\r\n\r\nimport {\r\n    getYearsInterval\r\n} from './utils.js';\r\n\r\nconst View = ViewType => class extends Component {\r\n    static propTypes = {\r\n        onDateClick: PropTypes.func.isRequired,\r\n        date: MomentPropType.momentObj,\r\n        classes: PropTypes.object.isRequired\r\n    };\r\n\r\n    static defaultProps = {\r\n        date: new Date()\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleOnDateClick = this.handleOnDateClick.bind(this);\r\n    }\r\n\r\n    handleOnDateClick(date) {\r\n        this.props.onDateClick(date);\r\n    }\r\n\r\n    render() {\r\n        return <ViewType\r\n                    { ...this.props }\r\n                    classes={ this.props.classes }\r\n                    date={ this.props.date }\r\n                    handleOnDateClick={ this.handleOnDateClick }\r\n                    />\r\n    }\r\n};\r\n\r\nconst Weeks = (props) => {\r\n    const { date, classes, firstDayOfWeek } = props;\r\n    const rows = getTotalWeeksInMonth(date);\r\n    const now = moment();\r\n    const selected = moment(date);\r\n    const weekdays = makeInterval(config.weeksCols)\r\n        .map((_, i) => moment().weekday(i + firstDayOfWeek).format('dd'));\r\n\r\n    const fdow = getFirstDayOfFirstWeek(date);\r\n\r\n    return (\r\n        <div className={ classes.weeksView }>\r\n            <div className={ classes.weekdayNames }>\r\n                { weekdays.map((weekday, i) =>\r\n                    <div key={ i } className={ classes.weekdayName }>\r\n                        { weekday }\r\n                    </div>\r\n                ) }\r\n            </div>\r\n            { makeInterval(rows).map(\r\n                (_, i) =>\r\n                <div key={ i } className={ classes.weeksRow }>\r\n                { weekdays.map((_, j) => {\r\n                    const next = moment( fdow ).add(i + j + 6 * i + firstDayOfWeek, 'day');\r\n                    return (\r\n                        <div key={ j }\r\n                            onClick={ () => props.handleOnDateClick(moment( next )) }\r\n                            className={\r\n                                classes.weeksCell +\r\n                                ( next.isSame(now, 'day') ? ` ${ classes.current }` : '' ) +\r\n                                ( next.isSame(selected, 'day') ? ` ${ classes.selected }` : '' ) +\r\n                                ( next.isSame(date, 'month') ? '' : ` ${ classes.weeksCellNotCurMonth }` )\r\n                            }>\r\n                            { next.format('D') }\r\n                        </div>\r\n                    );\r\n                }\r\n                ) }\r\n                </div>\r\n            ) }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Months = (props) => {\r\n    const { date, classes } = props;\r\n    const monthFrom = moment(date).month(0);\r\n    const format = 'MMM';\r\n    const rows = 12 / config.monthsCols;\r\n    const now = moment();\r\n    const selected = moment(date);\r\n\r\n    return (\r\n        <div className={ classes.yearsView }>\r\n        { makeInterval(rows).map((_, i) =>\r\n            <div key={ i }\r\n                className={ classes.monthsRow }>\r\n                { makeInterval(config.monthsCols).map( (_, j) => {\r\n                    const next = moment( monthFrom ).add(i + j + ( config.monthsCols - 1 ) * i, 'month');\r\n                    return (\r\n                        <div key={ j }\r\n                            onClick={ () => props.handleOnDateClick(moment( next )) }\r\n                            className={\r\n                                classes.monthsCell +\r\n                                ( next.isSame(selected, 'day') ? ` ${ classes.selected }` : '' ) +\r\n                                ( next.isSame(now, 'day') ? ` ${ classes.current }` : '' )\r\n                            }\r\n                            >\r\n                            { next.format(format) }\r\n                        </div>\r\n                    )\r\n                }) }\r\n            </div>\r\n        ) }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Years = (props) => {\r\n    const { date, classes } = props;\r\n    const { yearsFrom } = getYearsInterval(date, config.yearsInterval);\r\n    const format = 'YYYY';\r\n    const rows = ( config.yearsInterval * 2 + 1 ) / config.yearsCols;\r\n    const now = moment();\r\n    const selected = moment(date);\r\n\r\n    return (\r\n        <div className={ classes.yearsView }>\r\n        { makeInterval(rows).map((_, i) =>\r\n            <div key={ i }\r\n                className={ classes.yearsRow }>\r\n                { makeInterval(config.yearsCols).map( (_, j) => {\r\n                    const next = moment( yearsFrom ).add(i + j + ( config.yearsCols - 1 ) * i, 'year');\r\n                    return (\r\n                        <div key={ j }\r\n                            onClick={ () => props.handleOnDateClick(moment( next )) }\r\n                            className={\r\n                                classes.yearsCell +\r\n                                ( next.isSame(selected, 'day') ? ` ${ classes.selected }` : '' ) +\r\n                                ( next.isSame(now, 'day') ? ` ${ classes.current }` : '' )\r\n                            }\r\n                            >\r\n                            { next.format(format) }\r\n                        </div>\r\n                    )\r\n                }) }\r\n            </div>\r\n        ) }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const WeeksView  = View(Weeks);\r\nexport const MonthsView = View(Months);\r\nexport const YearsView  = View(Years);\r\n\n\n\n/** WEBPACK FOOTER **\n ** src/views.js\n **/","export default {\r\n    classPrefix: 'better-date-picker',\r\n    yearsInterval: 4,\r\n    yearsCols: 3,\r\n    monthsCols: 4,\r\n    weeksCols: 7\r\n};\r\n\n\n\n/** WEBPACK FOOTER **\n ** src/config.js\n **/","import moment from 'moment';\r\n\r\nimport defaults from './defaults.js';\r\n\r\nexport const getMomentOrNull = (date, format = defaults.format) => {\r\n    if (moment.isMoment(date)) {\r\n        return date;\r\n    }\r\n\r\n    if (moment.isDate(date) && !isNaN( date.getTime() )) {\r\n        return moment(date);\r\n    }\r\n\r\n    if (typeof date === 'string' && date.length) {\r\n        const result = moment(date, format, true);\r\n        if (result.isValid()) {\r\n            return result;\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nexport const makeInterval = length => {\r\n    if (length === null || length === '' || isNaN(length) || +length <= 0) {\r\n        return [];\r\n    }\r\n\r\n    return Array.apply(null, Array(length));\r\n};\r\n\r\nexport const getYearsInterval = ( date, interval ) => {\r\n    let yearsTo   = null;\r\n    let yearsFrom = null;\r\n\r\n    if (interval === null || interval === '' || isNaN(interval) || +interval < 0) {\r\n        return { yearsFrom, yearsTo };\r\n    }\r\n\r\n    yearsFrom = getMomentOrNull(date);\r\n    yearsTo   = getMomentOrNull(date);\r\n\r\n    if (yearsFrom && yearsTo) {\r\n        yearsFrom.add(-1 * interval, 'year');\r\n        yearsTo.add(interval, 'year');\r\n    }\r\n\r\n    return { yearsFrom, yearsTo };\r\n};\r\n\r\nexport const getTotalWeeksInMonth = date => {\r\n    if (getMomentOrNull(date) === null) {\r\n        return 0;\r\n    }\r\n\r\n    const startWeek = moment(date).startOf('month').week();\r\n    const endWeek   = moment(date).endOf('month').week();\r\n\r\n    const result = ( endWeek > startWeek ? endWeek - startWeek : startWeek ) + 1;\r\n\r\n    return result > 6 ? 6 : result;\r\n};\r\n\r\nexport const getFirstDayOfFirstWeek = date => {\r\n    if (getMomentOrNull(date) === null) {\r\n        return null;\r\n    }\r\n\r\n    const fdom = moment(date).startOf('month');\r\n    const fdomWeekday = fdom.weekday();\r\n\r\n    return fdom.add(-1 * fdomWeekday, 'day');\r\n};\r\n\r\n\n\n\n/** WEBPACK FOOTER **\n ** src/utils.js\n **/","import React from 'react';\r\n\r\nexport default {\r\n    leftArrow: <span>‹</span>,\r\n    rightArrow: <span>›</span>,\r\n    view: 'weeks',\r\n    format: 'YYYY-MM-DD'\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** src/defaults.js\n **/","import config from './config.js';\r\n\r\n// List of classes used in the module.\r\n// Will allow to easily swap \"themes\" as well\r\n// as providing a bare component with no styling\r\nexport default {\r\n    container:            `${config.classPrefix}-container`,\r\n    containerClosing:     `${config.classPrefix}-container-closing`,\r\n    protector:            `${config.classPrefix}-protector`,\r\n    input:                `${config.classPrefix}-input`,\r\n    calendarContainer:    `${config.classPrefix}-calendar-container`,\r\n    calendar:             `${config.classPrefix}-calendar`,\r\n    toolbox:              `${config.classPrefix}-toolbox`,\r\n    controls:             `${config.classPrefix}-controls`,\r\n    title:                `${config.classPrefix}-title`,\r\n    leftArrow:            `${config.classPrefix}-left-arrow`,\r\n    rightArrow:           `${config.classPrefix}-right-arrow`,\r\n\r\n    current:              `${config.classPrefix}-current`,\r\n    selected:             `${config.classPrefix}-selected`,\r\n\r\n    // WeeksView\r\n    weeksView:            `${config.classPrefix}-weeks-view`,\r\n    weekdayName:          `${config.classPrefix}-weeks-name`,\r\n    weekdayNames:         `${config.classPrefix}-weeks-names`,\r\n    weeksRow:             `${config.classPrefix}-weeks-row`,\r\n    weeksCell:            `${config.classPrefix}-weeks-cell`,\r\n    weeksCellNotCurMonth: `${config.classPrefix}-weeks-cell-not-current-month`,\r\n\r\n    // MonthsView\r\n    monthsView:           `${config.classPrefix}-years-view`,\r\n    monthsRow:            `${config.classPrefix}-years-row`,\r\n    monthsCell:           `${config.classPrefix}-years-cell`,\r\n\r\n    // YearsView\r\n    yearsView:            `${config.classPrefix}-years-view`,\r\n    yearsRow:             `${config.classPrefix}-years-row`,\r\n    yearsCell:            `${config.classPrefix}-years-cell`\r\n};\r\n\r\n\n\n\n/** WEBPACK FOOTER **\n ** src/classes.js\n **/"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACtCA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAEA;AACA;AAAA;AACA;AACA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;;;;;;;;AACA;;;AA2BA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AA1CA;AA2CA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AAEA;AACA;AAGA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AARA;AAUA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAVA;AAYA;;;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AASA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAPA;AAaA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AATA;AAeA;AAAA;AAAA;AACA;AADA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAPA;AArCA;AAjBA;AAuEA;;;;;;;;AA1XA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAFA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AA4WA;;;;;;ACznGA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACbA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AACA;AACA;;;AACA;AACA;;;;;;;;;AASA;AAAA;AACA;AADA;AAAA;AACA;AAUA;AAAA;AACA;AADA;AACA;AAEA;AAHA;AAIA;AACA;AAhBA;AAAA;AAAA;AAkBA;AACA;AAnBA;AAAA;AAAA;AAsBA;AAEA;AACA;AACA;AAJA;AAMA;AA5BA;AACA;AADA;AAAA;AAEA;AACA;AACA;AAHA;AAOA;AADA;AAPA;AACA;AA8BA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AADA;AADA;AADA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAMA;AARA;AAWA;AAfA;AADA;AATA;AA+BA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAQA;AARA;AAWA;AAhBA;AADA;AADA;AAuBA;AACA;AACA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAQA;AARA;AAWA;AAhBA;AADA;AADA;AAuBA;AACA;AACA;AACA;;;;;;;;;;;;AChKA;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;;;;;;;ACAA;AACA;;;AACA;AACA;;;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvEA;AACA;;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;;;;;;;;;;;;ACFA;AACA;;;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAhCA;;;","sourceRoot":""}